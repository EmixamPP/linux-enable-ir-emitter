
#include <time.h>

#include <format>
#include <fstream>
#include <iomanip>  // put_time
#include <iostream>
#include <string_view>
using namespace std;

constexpr auto LOG_FILE = "@log_file@";

/**
 * @brief A simple, non-thread, safe colored logger, that follows the syslog standard.
 */
struct Logger {
  enum class Level : uint8_t { EMERGENCY, ALERT, CRITICAL, ERROR, WARN, NOTICE, INFO, DEBUG };

  void set_level(Level level) { level_ = level; }

  void enable_file() noexcept {
    if (!file_stream_.is_open()) {
      try {
        file_stream_.open(LOG_FILE, ios::out | ios::app);
      } catch (const exception &e) {
        debug(e.what());
      }
      if (!file_stream_.is_open()) {
        warn("Impossible to use the log file {}. Ensure it is writable by the user.", LOG_FILE);
      }
    }
  }

  template <typename... Args>
  void emergency(string_view fmt, Args &&...args) noexcept {
    log(Level::EMERGENCY, fmt, std::forward<Args>(args)...);
  }

  template <typename... Args>
  void alert(string_view fmt, Args &&...args) noexcept {
    log(Level::ALERT, fmt, std::forward<Args>(args)...);
  }

  template <typename... Args>
  void critical(string_view fmt, Args &&...args) noexcept {
    log(Level::CRITICAL, fmt, std::forward<Args>(args)...);
  }

  template <typename... Args>
  void error(string_view fmt, Args &&...args) noexcept {
    log(Level::ERROR, fmt, std::forward<Args>(args)...);
  }

  template <typename... Args>
  void warn(string_view fmt, Args &&...args) noexcept {
    log(Level::WARN, fmt, std::forward<Args>(args)...);
  }

  template <typename... Args>
  void notice(string_view fmt, Args &&...args) noexcept {
    log(Level::NOTICE, fmt, std::forward<Args>(args)...);
  }

  template <typename... Args>
  void info(string_view fmt, Args &&...args) noexcept {
    log(Level::INFO, fmt, std::forward<Args>(args)...);
  }

  template <typename... Args>
  void debug(string_view fmt, Args &&...args) noexcept {
    log(Level::DEBUG, fmt, std::forward<Args>(args)...);
  }

  static Logger &get_instance() {
    static Logger instance;
    return instance;
  }

 private:
  Level level_ = Level::INFO;
  ofstream file_stream_;

  template <typename... Args>
  void log(Level target_level, string_view fmt, Args &&...args) noexcept {
    if (target_level <= level_) {
      string message = vformat(fmt, make_format_args(args...));
      string output = format("[{}] {}", to_string(target_level), message);

      clog << get_color(target_level) << output << "\033[0m" << endl;
      if (file_stream_.is_open()) {
        auto t = time(nullptr);
        auto *tm = localtime(&t);
        file_stream_ << put_time(tm, "[%H:%M:%S] ") << output << endl;
      }
    }
  }

  static string to_string(Level level) noexcept {
    switch (level) {
      case Level::DEBUG:
        return "DEBUG";
      case Level::INFO:
        return "INFO";
      case Level::NOTICE:
        return "NOTICE";
      case Level::WARN:
        return "WARN";
      case Level::ERROR:
        return "ERROR";
      case Level::CRITICAL:
        return "CRITICAL";
      case Level::ALERT:
        return "ALERT";
      case Level::EMERGENCY:
        return "EMERGENCY";
      default:
        return "UNKNOWN";
    }
  }

  static const char *get_color(Level level) noexcept {
    switch (level) {
      case Level::DEBUG:
        return "\033[90m";  // Gray
      case Level::INFO:
        return "\033[92m";  // Green
      case Level::NOTICE:
        return "\033[94m";  // Blue
      case Level::WARN:
        return "\033[93m";  // Yellow
      case Level::ERROR:
      case Level::CRITICAL:
      case Level::ALERT:
      case Level::EMERGENCY:
        return "\033[91m";  // Red
      default:
        return "\033[0m";  // Reset
    }
  }
};
