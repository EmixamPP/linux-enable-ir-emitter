#pragma once

#include <memory>
#include <string_view>
using namespace std;

#include <spdlog/sinks/basic_file_sink.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/spdlog.h>

constexpr char LOG_FILE[] = "@log_file@";

namespace logger {
/**
 * @brief Setup the logger to output in the a console and optionally in a file
 * as wel as enabling the debug level for the console.
 *
 * @param verbose_console set debug level for the console
 * @param enable_file enable log in file (trace level)
 *
 */
inline void setup(bool verbose_console, bool enable_file) {
  auto console_sink = make_shared<spdlog::sinks::stdout_color_sink_st>();
  console_sink->set_level(verbose_console ? spdlog::level::debug : spdlog::level::info);
  console_sink->set_pattern("[%l] %v");

  std::vector<spdlog::sink_ptr> sinks{console_sink};

  if (enable_file)  // add file sink if possible
  {
    try {
      auto file_sink = make_shared<spdlog::sinks::basic_file_sink_st>(LOG_FILE);
      file_sink->set_level(spdlog::level::debug);
      file_sink->set_pattern("[%H:%M:%S] [%l] %v");

      sinks.push_back(file_sink);
    } catch (const spdlog::spdlog_ex &e) {
      spdlog::warn("Impossible to use the log file {}. Ensure it is writable by the user.",
                   LOG_FILE);
    }
  }

  auto logger = make_shared<spdlog::logger>("logger", sinks.begin(), sinks.end());
  logger->set_level(spdlog::level::debug);
  spdlog::set_default_logger(logger);
}

template <typename... Args>
void debug(std::string_view fmt, Args &&...args) {
  spdlog::debug(SPDLOG_FMT_RUNTIME(fmt), std::forward<Args>(args)...);
}

template <typename... Args>
void info(std::string_view fmt, Args &&...args) {
  spdlog::info(SPDLOG_FMT_RUNTIME(fmt), std::forward<Args>(args)...);
}

template <typename... Args>
void warn(std::string_view fmt, Args &&...args) {
  spdlog::warn(SPDLOG_FMT_RUNTIME(fmt), std::forward<Args>(args)...);
}

template <typename... Args>
void error(std::string_view fmt, Args &&...args) {
  spdlog::error(SPDLOG_FMT_RUNTIME(fmt), std::forward<Args>(args)...);
}

template <typename... Args>
void critical(std::string_view fmt, Args &&...args) {
  spdlog::critical(SPDLOG_FMT_RUNTIME(fmt), std::forward<Args>(args)...);
}
}  // namespace logger