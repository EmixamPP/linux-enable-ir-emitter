#include <filesystem>
#include <fstream>
#include <set>
#include <string>
using namespace std;

#include <yaml-cpp/yaml.h>

#include "camera/camerainstruction.hpp"
#include "configuration/configuration.hpp"
#include "configuration/tools.hpp"
#include "logger.hpp"

const string Configuration::V4L_PREFIX = "/dev/v4l/by-path/";
const string Configuration::SAVE_FOLDER_CONFIG_PATH = "@configdir@/";

string Configuration::v4lname() const {
  try {
    set<string> names;  // multiple names can exists
    auto device_path = filesystem::canonical(camera->device());

    for (const auto &v4l : filesystem::directory_iterator(V4L_PREFIX))
      if (device_path == filesystem::canonical(v4l) && v4l.path().has_filename())
        names.emplace(v4l.path().filename());

    if (!names.empty()) {
      return *names.begin();
    }
  } catch (const std::exception &e) {
    logger::debug(e.what());
  }

  throw Exception("Impossible to obtain the v4l name of {}.", camera->device());
}

void Configuration::load(bool init) {
  try {
    YAML::Node node = YAML::LoadFile(path_);
    instructions_ = node.as<CameraInstructions>();
  } catch (const Exception &e) {
    throw e;
  } catch (const std::exception &e) {
    logger::debug(e.what());
    if (!init) {
      throw Exception("No configuration found for {} at {}.", camera->device(), path_);
    }
    instructions_ = Tools::Scan(camera);
    save(true);
  }
}

void Configuration::save(bool init) const {
  auto path = path_ + (init ? ".ini" : "");
  try {
    YAML::Node node(instructions_);
    ofstream file(path);
    file << node << endl;
    file.close();
  } catch (const std::exception &e) {
    logger::debug(e.what());
    throw Exception("Impossible to save the configuration for {} at {}.", camera->device(), path);
  }

  logger::debug("Configuration for {} saved here: {}.", camera->device(), path);
}

Configuration::Configuration(CameraPtr camera, bool init)
    : camera(std::move(camera)), path_(SAVE_FOLDER_CONFIG_PATH + v4lname()) {
  load(init);
}

Configuration::~Configuration() {
  if (save_on_del_) {
    try {
      save(false);
    } catch (const Exception &e) {
      logger::error(e.what());
    }
  }
}

CameraInstructions& Configuration::instructions() noexcept {
  save_on_del_ = true;
  return instructions_;
}

CameraInstructions::iterator Configuration::begin() {
  save_on_del_ = true;
  return instructions_.begin();
}

CameraInstructions::iterator Configuration::end() {
  save_on_del_ = true;
  return instructions_.end();
}

CameraInstructions::const_iterator Configuration::begin() const { return instructions_.begin(); }

CameraInstructions::const_iterator Configuration::end() const { return instructions_.end(); }

Configurations Configuration::ConfiguredDevices() noexcept {
  Configurations confs;
  for (const auto &conf : filesystem::directory_iterator(SAVE_FOLDER_CONFIG_PATH)) {
    // do not consider saved initial config
    if (conf.path().filename().extension().compare(".ini") == 0) continue;

    auto device = V4L_PREFIX + conf.path().filename().string();
    CameraPtr camera = make_shared<Camera>(device);
    confs.push_back(Configuration(camera, false));
  }
  return confs;
}
