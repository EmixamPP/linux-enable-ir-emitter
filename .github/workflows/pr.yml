name: Pull Request

on:
  pull_request_target:

jobs:
  build:
    uses: ./.github/workflows/build.yml
    with:
      buildtype: debug

  comment:
    name: Bot comment
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: thollander/actions-comment-pull-request@v3
        with:
          comment_tag: bot_comment
          mode: recreate
          message: |
            ## :arrow_right: Commit ${{ github.event.pull_request.head.sha }}

            ## :clipboard: [Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ## :hammer_and_wrench: Building result: ${{ (needs.build.outputs.compile == 'success' && ':white_check_mark:') || (needs.build.outputs.compile == 'skipped' && ':heavy_minus_sign:') || ':x:' }}
            ### :package: Artifacts:
            ${{ needs.build.outputs.compile == 'success' && '
            1. [Download the tarball](${{ needs.build.outputs.tarball_url }}).
            2. `unzip linux-enable-ir-emitter*.tar.gz.zip`
            3. [Execute the install instructions](README.md#installation)

            During the execution the tool raises an exception?\
            Please send us the gdb backtrace: `sudo gdb --ex run --args linux-enable-ir-emitter <your command args>`, once the crash arrives, type `bt` to show the error trace (`q` to exit).
            ' || ':heavy_minus_sign:' }}

            ## :test_tube: Unit tests results: ${{ (needs.build.outputs.unit-tests == 'success' && ':white_check_mark:') || (needs.build.outputs.unit-tests == 'skipped' && ':heavy_minus_sign:') || ':x:' }}

            ## :stethoscope: clang-tidy results: ${{ (needs.clang-tidy.result == 'success' && ':white_check_mark:') || (needs.clang-tidy.result == 'skipped' && ':heavy_minus_sign:') || ':x:' }}

            ## :art: clang-format results: ${{ (needs.clang-format.result == 'success' && ':white_check_mark:') || (needs.clang-format.result == 'skipped' && ':heavy_minus_sign:') || ':x:' }}
